{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ckanext-selfinfo","text":"<p>This extension is built to represent a basic information about the running CKAN Application accessible only to admins.</p> <p></p> <p>CKAN should be configured to be able to connect to Redis as it heavily relies on it for storage.</p> <p>On CKAN admin page <code>/ckan-admin/selfinfo</code>, admin can see such information as:</p> <ul> <li>System Information<ul> <li>System Platform</li> <li>Distribution</li> <li>Python version</li> </ul> </li> <li>RAM<ul> <li>RAM Usage in %</li> <li>RAM Usage GB</li> <li>RAM Total</li> <li>Monitor feature<ul> <li>Top 10 processes shown</li> </ul> </li> </ul> </li> <li>Disk Space<ul> <li>Path</li> <li>Disk Usage in %</li> <li>Disk Total</li> <li>Disk Free</li> </ul> </li> <li>CKAN Information<ul> <li>Basic Information</li> <li>Actions</li> <li>Auth</li> <li>Helpers</li> <li>Blueprints</li> <li>CLI Commands</li> </ul> </li> <li>GIT Information (Optional, see Config Settings section)<ul> <li>Project</li> <li>Head</li> <li>Based on</li> <li>Commit</li> <li>Remotes</li> <li>Errors info in case if cannot be shown</li> </ul> </li> <li>PIP Freeze<ul> <li>List of modules that are installed.</li> </ul> </li> <li>Python Information<ul> <li>Provides information about CKAN Core, CKAN Extensions, Python installed packages. It shows their current version and latest version.</li> </ul> </li> <li>CKAN Queues<ul> <li>Show queues and their active jobs.</li> </ul> </li> <li>Solr Schema (Optional, see Enable Solr Schema)<ul> <li>Shows CKAN Solr Schema.</li> </ul> </li> <li>Errors (Optional, see Enable Error Saving)<ul> <li>Shows latest exceptions.</li> </ul> </li> </ul> <p>Recommened to firstly visit Secure URL and Action and Unique Redis key after the installation done.</p>"},{"location":"cli/","title":"CLI","text":"<p><code>selfinfo write-selfinfo</code> - Stores Selfinfo data under unique Redis key. This data can be retrieved by selfinfo page if <code>ckan.selfinfo.additional_profiles_using_redis_keys</code> is set with the stored keys.</p> <p>Arguments:</p> <ul> <li>key - Unique Redis key. Example <code>CKAN_Additional_Selfinfo_Source</code></li> <li>label - (Optional) Label to be displayed on selfinfo page. Example <code>\"Additional Selfinfo Source\"</code>. If not provided, <code>key</code> will be used as label instead.</li> </ul> <p><code>selfinfo delete-selfinfo-redis-key</code> - Deletes Redis key if such exists specifically created for selfinfo as it adds an prefix to the unique under the hood.</p> <p>Arguments:</p> <ul> <li>key - Unique Redis key. Example <code>CKAN_Additional_Selfinfo_Source</code></li> </ul> <p><code>selfinfo write-selfinfo-duplicated-env</code> - Stores Selfinfo information in Redis under internal IP address of the Env. In order to show them, <code>ckan.selfinfo.duplicated_envs.mode</code> should be turned on in CKAN config, this replaces <code>default</code> profile with those Profile Keys.</p>"},{"location":"config_settings/","title":"Config Settings","text":"<p><code>ckan.selfinfo.redis_prefix_key</code> - This configuration is needed, when you use Redis with multiple CKAN apps. In order to have a unique key per portal, this configuration can be used. Example <code>ckan_test</code> will be used as <code>ckan_test_errors_selinfo</code>.</p> <p><code>ckan.selfinfo.page_url</code> - (Recommended to use) Used to provide alternative URL to Selfinfo Admin Page. By default it is set to <code>/ckan-admin/selfinfo</code>.</p> <p><code>ckan.selfinfo.main_action_name</code> - (Recommended to use) Used to provide an alternative name for the main action of selfinfo. By default it is set to <code>get_selfinfo</code>.</p> <p><code>ckan.selfinfo.partitions</code> - Used for representing disk space. The value is comma separated paths. By default the value is <code>/</code>, which is usually the root.</p> <p>Example: <code>/path/to/partition /path/to/partition2 /path/to/partition3</code></p> <p><code>ckan.selfinfo.errors_limit</code> - Limit used to specify how much errors will be stored in Redis. By default this value is <code>40</code>.</p> <p><code>ckan.selfinfo.ckan_repos_path</code> - Path to the src folder where CKAN and CKAN Extensions stored at the environment. While provided, additional GIT Infromation will be granted. Make sure that there no other folders and files that are not related to CKAN are stored there. Example: <code>/usr/lib/ckan/default/src</code></p> <p><code>ckan.selfinfo.ckan_repos</code> - List of CKAN Extension folders separated by space (ckanext-scheming ckanext-spatial ckanext-xloader). By default, if <code>ckan.selfinfo.ckan_repos_path</code> is provided, it will look into the directory and gather the extensions from there.</p>"},{"location":"config_settings/#note","title":"NOTE!","text":"<p>For Linux, keep in mind that the added folder in <code>ckan.selfinfo.ckan_repos_path</code> should have the same owner as the one that runs the application (e.g. if the application runs from <code>ckan</code> User in the system, then ckanext-scheming folder owner should be <code>ckan</code>), otherwise there will be an error related to ownership of the repository.</p> <p>Errors for GIT now being stored below the original Table on GIT Info tab.</p> <p><code>ckan.selfinfo.solr_schema_filename</code> - (Optional) Used to specify the filename that Solr uses for CKAN schema. Mentioned in Enable Solr Schema.</p> <p><code>ckan.selfinfo.additional_profiles_using_redis_keys</code> - Retrieves selfinfo data on page from external sources that store selfinfo data using <code>write-selfinfo</code> cli command under unique Redis key. The stored data should be under same Redis connection as per the \"default\" profile.</p> <p>Example: <code>unique_redis_key_1 unique_redis_key_2</code></p> <p><code>ckan.selfinfo.categories_list</code> - (Optional) List of categories that should only be shown on Selfinfo Page or Returned using API. Example of usage <code>ckan.selfinfo.categories_list = errors ram_usage disk_usage</code>. By default, if not set, selfinfo will show all categories available.</p> <p><code>ckan.selfinfo.duplicated_envs.mode</code> - (Optional) By enabling, removes <code>default</code> profile and replaces it by duplicated Envs mentioned in Selfinfo under Redis internal env IP key section. By default set to <code>False</code>.</p> <p><code>ckan.selfinfo.categories_list</code> - (Optional) Used in combination with ckan.selfinfo.duplicated_envs.mode to specify, which categories are going to be shared between the duplicated Envs. Mentioned in Shared categories.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>Out of the box, not all information is shown, some of it should be additionally configured to appear on the Selinfo page and endpoint.</p>"},{"location":"installation/","title":"Installation","text":"<p>To install ckanext-selfinfo</p> <p>Using GIT Clone:</p> <ol> <li> <p>Activate your CKAN virtual environment, for example:</p> <p>. /usr/lib/ckan/default/bin/activate</p> </li> <li> <p>Clone the source and install it on the virtualenv</p> <p>git clone https://github.com//ckanext-selfinfo.git cd ckanext-selfinfo pip install -e .</p> </li> <li> <p>Add <code>selfinfo</code> to the <code>ckan.plugins</code> setting in your CKAN    config file (by default the config file is located at    <code>/etc/ckan/default/ckan.ini</code>).</p> </li> <li> <p>Restart CKAN. For example if you've deployed CKAN with Apache on Ubuntu:</p> <p>sudo service apache2 reload</p> </li> </ol> <p>Using Pypi:</p> <ol> <li> <p>Activate your CKAN virtual environment, for example:</p> <p>. /usr/lib/ckan/default/bin/activate</p> </li> <li> <p>pip install ckanext-selfinfo</p> </li> </ol>"},{"location":"requirements/","title":"Requirements","text":"<p>Having CKAN Core version 2.10+ and Redis configured</p>"},{"location":"configuration/categories/","title":"Categories","text":""},{"location":"configuration/categories/#categories","title":"Categories","text":"<p>Out of the box, Selfinfo will try to load all the possible information that currently available, but you can reduce those by adding <code>ckan.selfinfo.categories_list</code>, where you provide an list of categories you want to see on the page and API endpoint.</p> <p>This is really needed, when you have an instance that doesn't use UI, like CKAN Jobs worker, so for example the Blueprints are not needed, as CKAN won't provide them or Python Modules, which can be spacing consuming for big projects.</p> <p>See Config Settings for an example of this CKAN Config.</p> <p>Here are the current list of categories to choose:</p> <pre><code>ckan.selfinfo.categories_list =\n    python_modules\n    platform_info\n    ram_usage\n    disk_usage\n    git_info\n    freeze\n    errors\n    actions\n    auth_actions\n    blueprints\n    helpers\n    ckan_cli_commands\n    status_show\n    ckan_queues\n    ckan_solr_schema\n</code></pre>"},{"location":"configuration/errors/","title":"Enable Errors","text":""},{"location":"configuration/errors/#enable-errors-saving","title":"Enable Errors Saving","text":"<p>In CKAN INI file, need to add and modify few lines.</p> <p>After <code>handler_console</code> section add:</p> <pre><code>[handler_selfinfoErrorHanlder]\nclass = ckanext.selfinfo.handlers.SelfinfoErrorHandler\nlevel = ERROR\nformatter = generic\n</code></pre> <p>In <code>handlers</code> modify the <code>keys</code>, example:</p> <pre><code>[handlers]\nkeys = console, selfinfoErrorHanlder\n</code></pre> <p>In <code>logger_ckan</code> modify <code>handlers</code>, example:</p> <pre><code>[logger_ckan]\nlevel = INFO\nhandlers = console, selfinfoErrorHanlder\nqualname = ckan\npropagate = 0\n</code></pre> <p>In <code>logger_ckanext</code> modify <code>handlers</code>, example:</p> <pre><code>[logger_ckanext]\nlevel = DEBUG\nhandlers = console, selfinfoErrorHanlder\nqualname = ckanext\npropagate = 0\n</code></pre>"},{"location":"configuration/git_info/","title":"GIT Info","text":""},{"location":"configuration/git_info/#enable-git-info","title":"Enable GIT Info","text":"<p>In order to enable GIT Info you need to add the <code>ckan.selfinfo.ckan_repos_path</code>, which is the path to your folder, where all extensions stored.</p> <p>Keep in mind, that ownership for those folders should be accessible for the User that runs the CKAN APP, if not, on GIT Info tab under Repos with errors, errors will be shown regarding ownership.</p> <p>Additionally you can specify using <code>ckan.selfinfo.ckan_repos</code>, which repos you want to track from this folder, as by default it will try to read all of them.</p>"},{"location":"configuration/secure_url_and_action/","title":"Secure URL and Action","text":""},{"location":"configuration/secure_url_and_action/#setup-secure-url-and-action-name","title":"Setup secure URL and Action name","text":"<p>Out of the box, Selfinfo page registered under <code>/ckan-admin/selfinfo</code> URL, which can is only protected by Sysadmin access check.</p> <p>To add an additional layer of protection, provide an custom path that will modify the original path, so other wont know under what URL it is actually registered. This can be done by adding <code>ckan.selfinfo.page_url</code> to CKAN config, where that value is your custom URL.</p> <p></p> <p>Same goes for main Selfinfo endpoint that provides same information, but in API format. By default it uses <code>get_selfinfo</code> endpoint and to modify it using <code>ckan.selfinfo.main_action_name</code> CKAN config, where that value is the new action name.</p> <p></p>"},{"location":"configuration/solr_schema/","title":"Solr Schema","text":""},{"location":"configuration/solr_schema/#enable-solr-schema","title":"Enable Solr Schema","text":"<p>In order to enable Solr Schema you need to add <code>ckan.selfinfo.solr_schema_filename</code>, which is the filename that Solr uses for your schema. In different Solr settings this file can be named <code>managed-schema</code> or <code>schema.xml</code>, you can find which one Solr is using in your Solr Core directory -&gt; conf folder.</p> <p>If <code>ckan.selfinfo.solr_schema_filename</code> is not set, the tab will be missing.</p>"},{"location":"configuration/unique_redis_key_per_portal_instance/","title":"Unique Redis key","text":""},{"location":"configuration/unique_redis_key_per_portal_instance/#unique-redis-key-per-portalinstance","title":"Unique Redis key per portal/instance","text":"<p>By default, Selfinfo will store some of the Data like Errors or Python Modules under standard Redis keys and if you have another portal/instance connected to same Redis, they might interfere with each other, which is not what we want.</p> <p>To avoid this, you can add an unique Redis prefix key, that will allow you to separate one portal/instance from another. To do so, add <code>ckan.selfinfo.redis_prefix_key</code> config param with an unique prefix key.</p> <p>Example: adding <code>random_key</code> will store the data under <code>random_key_errors_selinfo</code>.</p> <p></p>"},{"location":"extending/overview/","title":"Extending Selfinfo","text":"<p>Selfinfo provides a different types of information about CKAN, but sometimes you need some custom information or manipulate with existing Data that Selfinfo provides.</p> <p>To extend Selfinfo, you can use CKAN hooks + template overwrite.</p>"},{"location":"extending/overview/#ckan-hooks","title":"CKAN Hooks","text":"<p>There is an interface ISelfinfo that has an method selfinfo_after_prepared, which provides you an ability to extend or modify the data before main Selfinfo action provides you.</p> <p>Example of how it might look in your <code>plugin.py</code> file:</p> <pre><code>from ckanext.selfinfo.interfaces import ISelfinfo\n\nclass MyPlugin(plugins.SingletonPlugin):\n    plugins.implements(ISelfinfo, inherit=True)\n\n    def selfinfo_after_prepared(self, data):\n        # Modifications done to data here\n\n        return data\n</code></pre>"},{"location":"extending/overview/#template-overwrite","title":"Template overwrite","text":"<p>You can add additional Tabs navigation and Tabs content by overwriting <code>additional_content_tabs.html</code> and <code>additional_navigation_tabs.html</code> templates. Those templates were specifically created to be overwritten.</p> <p>Example of how it might look for example overwriting <code>additional_navigation_tabs.html</code>:</p> <p>In your templates folder that structure should be like this:</p> <pre><code>/templates\n    /selfinfo\n        /snippets\n            /additional_navigation_tabs.html\n</code></pre> <p>Content example</p> <pre><code>&lt;a href=\"#nav-custom-{{ profile }}\" class=\"nav-link\" id=\"nav-custom-{{ profile }}-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#nav-custom-{{ profile }}\" role=\"tab\" aria-controls=\"nav-custom-{{ profile }}\" aria-selected=\"false\"&gt;Custom Tab&lt;/a&gt;\n</code></pre> <p>Why <code>snippets</code> instead of <code>{% block custom_block %}</code>, because of variables transferring after you extend an block, which are missing variables from the original template, while in overwriting snippet you can use the provided variables like <code>profile</code> and <code>data</code>.</p>"},{"location":"profiles/duplicated_env/","title":"Overview","text":""},{"location":"profiles/duplicated_env/#store-selfinfo-under-redis-internal-env-ip-key","title":"Store Selfinfo under Redis internal env IP key","text":"<p>Using <code>ckan selfinfo write-selfinfo-duplicated-env</code> cli command, you can store Selfinfo information about the CKAN APP under an internal Env IP Redis key.</p> <p>This option is needed, when your infostructure is build using Load Balancer from AWS for example, that generates duplicated Envs to distribute incoming traffic between Envs.</p> <p>By default Selfinfo stores and returns only infromation for 1 active Env that you got response from within the Client Browser or by making an request to it from another source, while having multiple duplicated Envs and opening the page, it will randomly load information from the Env that reponseded, with its current information.</p> <p>In order to see all Active duplicated Envs, you can store the information of each under an unique key using their internal IP that is assigned to them.</p> <p>To do so, you need to setup and cronjob for the Env image, from which new ENVs will be created that will run for example every 10 minutes and store its information under their IP address key.</p> <p>Then enable <code>ckan.selfinfo.duplicated_envs.mode</code> by setting it to <code>true</code> value.</p> <p>Now while opening the Selfinfo page, instead of <code>default</code> profile, there will be one or multiple profiles per each Env that is currently active.</p> <p></p> <p>Example of Cron job, running every 10 minutes:</p> <pre><code>*/10 * * * * /usr/lib/ckan/VIRTUAL_ENV/bin/ckan -c CONFIG_PATH selfinfo write-selfinfo-duplicated-env\" &gt; /dev/null 2&gt;&amp;1\n</code></pre>"},{"location":"profiles/overview/","title":"Overview","text":""},{"location":"profiles/overview/#profiles","title":"Profiles","text":"<p>By default, Selfinfo provides an infromation about current CKAN APP, which might be not enough where CKAN infostructure is split between different environments (instances).</p> <p>Due to this, <code>profiles</code> are added. This is an ability to get information about other Evnrionments on one Page. By default, main Selfinfo screen is marked under <code>default</code>, where all other profiles will have other labels or machine names.</p>"},{"location":"profiles/redis_key/","title":"Selfinfo custom Redis key","text":""},{"location":"profiles/redis_key/#store-selfinfo-under-redis-unique-key","title":"Store Selfinfo under Redis unique key","text":"<p>Using <code>ckan selfinfo write-selfinfo</code> cli command, you can store Selfinfo information about the CKAN APP under an unique Redis key, additionally adding label to it.</p> <p>The additional evironment should use same Redis connection, as the default profile in this example.</p> <p>Example of Cron job, running every 10 minutes:</p> <pre><code>*/10 * * * * /usr/lib/ckan/VIRTUAL_ENV/bin/ckan -c CONFIG_PATH selfinfo write-selfinfo UNIQUE_REDIS_KEY \"CUSTOM LABEL\" &gt; /dev/null 2&gt;&amp;1\n</code></pre> <p>Then you need to add this custom key to Selnfinfo config param <code>ckan.selfinfo.additional_profiles_using_redis_keys</code>, after reload the additional profile will be displayed.</p> <p></p>"},{"location":"profiles/shared_categories/","title":"Shared Categories","text":""},{"location":"profiles/shared_categories/#shared-caregories-between-envs","title":"Shared Caregories between Envs","text":"<p>While completing the steps from previous section, you'll be able to see new profiles per each duplicated Env.</p> <p>But because each Env stores its data, the storage can be increased <code>x</code> times per each duplicated Env, this is mostly related to Errors storage or Python Packages. Also Errors are going to be updated only after the cron job is completed (e.g. each 10 minutes for example).</p> <p>We can improve this by providing <code>ckan.selfinfo.duplicated_envs.shared_categories</code>, which are categories that will be shared between all duplicated Envs on fly.</p> <p>As an example I will take <code>errors</code>, as they are being stored in Redis and usually you want to have an access to them as soon as possible.</p> <p>Adding <code>errors</code> to <code>ckan.selfinfo.duplicated_envs.shared_categories</code>:</p> <ul> <li>While running the <code>ckan selfinfo write-selfinfo-duplicated-env</code> cronjob, it wont save the <code>errors</code> key in the Data, which free the storage for Redis.</li> <li>While opening the Selfinfo page, it will load the Env profiles and will attach the <code>errors</code> key to them on fly from the global <code>errors</code> key instead (e.g. wont store them per Env profile).</li> <li>Those Errors will be provided in real time on each page load, no matter what Env profile you are looking at, meaning that if one of Envs encountered an Error, it will be present on all profiles.</li> </ul> <pre><code>ckan.selfinfo.duplicated_envs.shared_categories =\n    errors\n</code></pre>"},{"location":"selftools/config_settings/","title":"Config Settings","text":"<p><code>ckan.selftools.opetations_pwd</code> - (Recommended) Provides an additional security layer for operations like update/delete/create for the Categoires.</p> <p><code>ckan.selftools.operations_limit</code> - Sets an limit to most of the operations like query/update. By default the limit is set to <code>100</code>.</p> <p><code>ckan.selftools.categories</code> - You can specify the categories you want to see on Selftools, for example you can remove DB category or leave only Config category. By default if not set, Selftools will show all possbile Categories. Current list looks this <code>solr db redis config</code>.</p> <p><code>ckan.selftools.tools_blacklist</code> - This is needed, when you don't want to remove for example DB Category, but want to disable the Update tools for security reasons, this config params allows you do to this. Here is an example of how it will look like if you want to disable DB Update and Redis Delete tools. In CKAN config we need to provide it like this <code>db.db_update redis.redis_delete</code>.</p> <p><code>ckan.selftools.config_blacklist</code> - In this configuration, you can add CKAN config that you don't want to expose while doing the query as an additional security layer, for example DB conection or Tokens. By default there already an predefined list of CKAN configuations that won't be shown like <code>sqlalchemy.url</code> and more. To provide an additional list set it like this <code>ckan.site_url ckan.site_id</code> and so on.</p>"},{"location":"selftools/configuration/","title":"Confiruation","text":"<p>Make sure to re-install Selfinfo extension mentioned in Installation step.</p> <p>To enable Selftools, you'll need to add <code>selftools</code> plugin to plugins list, but make sure that it is added before <code>selfinfo</code> plugin.</p> <p>Recommended step is to provide an password that will be required each time you want to do an Update/Delete operations using CKAN param <code>ckan.selftools.opetations_pwd</code> and this password will be required by the Action as an additional security layer. This configuration param is by default added to Config blacklist, so won't be exposed.</p> <p>You can check other CKAN config params that can be configured for Selftools and its Categories here.</p>"},{"location":"selftools/extending_selftools/","title":"Extending Selftools","text":""},{"location":"selftools/extending_selftools/#extending-db-models-list","title":"Extending DB Models list","text":"<p>To extend Selftools DB Models list, you can use CKAN hooks.</p>"},{"location":"selftools/extending_selftools/#ckan-hooks","title":"CKAN Hooks","text":"<p>There is an interface <code>ISelftools</code> that has an method <code>selftools_db_models</code>, which provides you an ability to extend or modify Models list that will appear in DB Category.</p> <p>Example of how it might look in your <code>plugin.py</code> file:</p> <pre><code>from ckanext.selftools.interfaces import ISelftools\n\nclass MyPlugin(plugins.SingletonPlugin):\n    plugins.implements(ISelftools, inherit=True)\n\n    def selftools_db_models(self, models_list):\n        # Modifications done to models_list here\n\n        return models_list\n</code></pre>"},{"location":"selftools/overview/","title":"Overview","text":""},{"location":"selftools/overview/#selftools","title":"Selftools","text":"<p>This plugin suggested to be an addition to Selfinfo tools, but considered to be moved to a separate plugin, due to difference in main idea and purpouse of Selfinfo.</p> <p>Unlike Selfinfo, where you retrieve information about CKAN setup, Selftools provides an actual data that stored for CKAN and be able to do manipulations with it like create/update/delete operations.</p> <p>Currently there few categories that comes out of the box and in future, there might be more categories and the existing tools will get more and more functionality overtime.</p> <p>Categories:</p> <ul> <li>SOLR<ul> <li>Query</li> <li>Index</li> <li>Delete</li> </ul> </li> <li>DB<ul> <li>Query</li> <li>Update</li> </ul> </li> <li>Redis<ul> <li>Query</li> <li>Update/Create</li> <li>Delete</li> </ul> </li> <li>Config<ul> <li>Query</li> </ul> </li> </ul> <p>Those categories can be used an many cases when quick fix is required on remote Environments or for investigation in combination with Selfinfo Errors category.</p> <p>Each category has its own separate page, where all of their functionality is shown and described.</p>"},{"location":"selftools/categories/config/","title":"Config","text":""},{"location":"selftools/categories/config/#query","title":"Query","text":"<p>Provides an ability to check CKAN config params.</p> <p>There is a functionality that allows to add CKAN Config params to blacklist, in order not to expose any critical infromation. Please check Config Settings -&gt; <code>ckan.selftools.config_blacklist</code> param for more details.</p> <p></p>"},{"location":"selftools/categories/db/","title":"DB","text":"<p>DB Category give you an ability to retrieve data from DB and update rows in it.</p> <p>The Query and Update tools are based on predefined list of CKAN Models to select from.</p> <p>There is a functionality that allows to extend the Models list and add your own Models to the List. You can find more details here.</p>"},{"location":"selftools/categories/db/#query","title":"Query","text":"<p>Provides an ability to search in DB using registered Models in CKAN.</p> <p></p>"},{"location":"selftools/categories/db/#update","title":"Update","text":"<p>Provides an ability to update data within DB.</p> <p></p>"},{"location":"selftools/categories/redis/","title":"Redis","text":""},{"location":"selftools/categories/redis/#query","title":"Query","text":"<p>Provides an ability to serach through Redis using keys.</p> <p></p>"},{"location":"selftools/categories/redis/#updatecreate","title":"Update/Create","text":"<p>Provides an ability to update/create Redis key/value.</p> <p></p>"},{"location":"selftools/categories/redis/#delete","title":"Delete","text":"<p>Provides an ability to delete key from Redis if exists.</p> <p></p>"},{"location":"selftools/categories/solr/","title":"Solr","text":""},{"location":"selftools/categories/solr/#query","title":"Query","text":"<p>Provides an ability to make pure Solr queries and check on how the Dataset is being indexed in Solr.</p> <p></p>"},{"location":"selftools/categories/solr/#index","title":"Index","text":"<p>Provides an ability index/re-index Datasets from UI. It can 1 Dataset or multiple Datasets.</p> <p></p>"},{"location":"selftools/categories/solr/#delete","title":"Delete","text":"<p>Provides an to delete Dataset from index.</p> <p></p>"}]}