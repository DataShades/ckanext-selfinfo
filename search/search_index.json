{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ckanext-selfinfo","text":"<p>This extension is built to represent a basic information about the running CKAN Application accessible only to admins.</p> <p></p> <p>CKAN should be configured to be able to connect to Redis as it heavily relies on it for storage.</p> <p>On CKAN admin page <code>/ckan-admin/selfinfo</code>, admin can see such information as:</p> <ul> <li>System Information<ul> <li>System Platform</li> <li>Distribution</li> <li>Python version</li> </ul> </li> <li>RAM<ul> <li>RAM Usage in %</li> <li>RAM Usage GB</li> <li>RAM Total</li> <li>Monitor feature<ul> <li>Top 10 processes shown</li> </ul> </li> </ul> </li> <li>Disk Space<ul> <li>Path</li> <li>Disk Usage in %</li> <li>Disk Total</li> <li>Disk Free</li> </ul> </li> <li>CKAN Information<ul> <li>Basic Information</li> <li>Actions</li> <li>Auth</li> <li>Helpers</li> <li>Blueprints</li> </ul> </li> <li>GIT Information (Optional, see Config Settings section)<ul> <li>Project</li> <li>Head</li> <li>Based on</li> <li>Commit</li> <li>Remotes</li> <li>Errors info in case if cannot be shown</li> </ul> </li> <li>PIP Freeze<ul> <li>List of modules that are installed.</li> </ul> </li> <li>Python Information<ul> <li>Provides information about CKAN Core, CKAN Extensions, Python installed packages. It shows their current version and latest version.</li> </ul> </li> <li>Errors (Optional, see Enable Error Saving)<ul> <li>Shows latest exceptions.</li> </ul> </li> </ul> <p>Recommened to firstly visit Secure URL and Action and Unique Redis key after the installation done.</p>"},{"location":"categories/","title":"Categories","text":""},{"location":"categories/#categories","title":"Categories","text":"<p>Out of the box, Selfinfo will try to load all the possible information that currently available, but you can reduce those by adding <code>ckan.selfinfo.categories_list</code>, where you provide an list of categories you want to see on the page and API endpoint.</p> <p>This is really needed, when you have an instance that doesn't use UI, like CKAN Jobs worker, so for example the Blueprints are not needed, as CKAN won't provide them or Python Modules, which can be spacing consuming for big projects.</p> <p>See Config Settings for an example of this CKAN Config.</p> <p>Here are the current list of categories to choose:</p> <ul> <li>python_modules</li> <li>platform_info</li> <li>ram_usage</li> <li>disk_usage</li> <li>git_info</li> <li>freeze</li> <li>errors</li> <li>actions</li> <li>auth_actions</li> <li>blueprints</li> <li>helpers</li> <li>status_show</li> </ul>"},{"location":"cli/","title":"CLI","text":"<p><code>selfinfo write-selfinfo</code> - Stores selfinfo data under unique Redis key. This data can be retrieved by selfinfo page if <code>ckan.selfinfo.additional_profiles_using_redis_keys</code> is set with the stored keys.</p> <p>Arguments:</p> <ul> <li>key - Unique Redis key. Example <code>CKAN_Additional_Selfinfo_Source</code></li> <li>label - (Optional) Label to be displayed on selfinfo page. Example <code>\"Additional Selfinfo Source\"</code>. If not provided, <code>key</code> will be used as label instead.</li> </ul> <p><code>selfinfo delete_selfinfo_redis_key</code> - Deletes Redis key if such exists specifically created for selfinfo as it adds an prefix to the unique under the hood.</p> <p>Arguments:</p> <ul> <li>key - Unique Redis key. Example <code>CKAN_Additional_Selfinfo_Source</code></li> </ul>"},{"location":"config_settings/","title":"Config Settings","text":"<p><code>ckan.selfinfo.redis_prefix_key</code> - This configuration is needed, when you use Redis with multiple CKAN apps. In order to have a unique key per portal, this configuration can be used. Example <code>ckan_test</code> will be used as <code>ckan_test_errors_selinfo</code>.</p> <p><code>ckan.selfinfo.page_url</code> - (Recommended to use) Used to provide alternative URL to Selfinfo Admin Page. By default it is set to <code>/ckan-admin/selfinfo</code>.</p> <p><code>ckan.selfinfo.main_action_name</code> - (Recommended to use) Used to provide an alternative name for the main action of selfinfo. By default it is set to <code>get_selfinfo</code>.</p> <p><code>ckan.selfinfo.partitions</code> - Used for representing disk space. The value is comma separated paths. By default the value is <code>/</code>, which is usually the root.</p> <p>Example: <code>/path/to/partition /path/to/partition2 /path/to/partition3</code></p> <p><code>ckan.selfinfo.errors_limit</code> - Limit used to specify how much errors will be stored in Redis. By default this value is <code>40</code>.</p> <p><code>ckan.selfinfo.ckan_repos_path</code> - Path to the src folder where CKAN and CKAN Extensions stored at the environment. While provided, additional GIT Infromation will be granted. Make sure that there no other folders and files that are not related to CKAN are stored there. Example: <code>/usr/lib/ckan/default/src</code></p> <p><code>ckan.selfinfo.ckan_repos</code> - List of CKAN Extension folders separated by space (ckanext-scheming ckanext-spatial ckanext-xloader). By default, if <code>ckan.selfinfo.ckan_repos_path</code> is provided, it will look into the directory and gather the extensions from there.</p>"},{"location":"config_settings/#note","title":"NOTE!","text":"<p>For Linux, keep in mind that the added folder in <code>ckan.selfinfo.ckan_repos_path</code> should have the same owner as the one that runs the application (e.g. if the application runs from <code>ckan</code> User in the system, then ckanext-scheming folder owner should be <code>ckan</code>), otherwise there will be an error related to ownership of the repository.</p> <p>Errors for GIT now being stored below the original Table on GIT Info tab.</p> <p><code>ckan.selfinfo.additional_profiles_using_redis_keys</code> - Retrieves selfinfo data on page from external sources that store selfinfo data using <code>write-selfinfo</code> cli command under unique Redis key. The stored data should be under same Redis connection as per the \"default\" profile.</p> <p>Example: <code>unique_redis_key_1 unique_redis_key_2</code></p> <p><code>ckan.selfinfo.categories_list</code> - (Optional) List of categories that should be shown on Selfinfo Page or Returned using API. Example of usage <code>ckan.selfinfo.categories_list = errors ram_usage disk_usage</code>. By default shows all configured categories.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>Out of the box, not all information is shown, some of it should be additionally configured to appear on the Selinfo page and endpoint.</p>"},{"location":"errors/","title":"Enable Errors","text":""},{"location":"errors/#enable-errors-saving","title":"Enable Errors Saving","text":"<p>In CKAN INI file, need to add and modify few lines.</p> <p>After <code>handler_console</code> section add:</p> <pre><code>[handler_selfinfoErrorHanlder]\nclass = ckanext.selfinfo.handlers.SelfinfoErrorHandler\nlevel = ERROR\nformatter = generic\n</code></pre> <p>In <code>handlers</code> modify the <code>keys</code>, example:</p> <pre><code>[handlers]\nkeys = console, selfinfoErrorHanlder\n</code></pre> <p>In <code>logger_ckan</code> modify <code>handlers</code>, example:</p> <pre><code>[logger_ckan]\nlevel = INFO\nhandlers = console, selfinfoErrorHanlder\nqualname = ckan\npropagate = 0\n</code></pre>"},{"location":"git_info/","title":"GIT Info","text":""},{"location":"git_info/#enable-git-info","title":"Enable GIT Info","text":"<p>In order to enable GIT Info you need to add the <code>ckan.selfinfo.ckan_repos_path</code>, which is the path to your folder, where all extensions stored.</p> <p>Keep in mind, that ownership for those folders should be accessible for the User that runs the CKAN APP, if not, on GIT Info tab under Repos with errors, errors will be shown regarding ownership.</p> <p>Additionally you can specify using <code>ckan.selfinfo.ckan_repos</code>, which repos you want to track from this folder, as by default it will try to read all of them.</p>"},{"location":"installation/","title":"Installation","text":"<p>To install ckanext-selfinfo</p> <p>Using GIT Clone:</p> <ol> <li> <p>Activate your CKAN virtual environment, for example:</p> <p>. /usr/lib/ckan/default/bin/activate</p> </li> <li> <p>Clone the source and install it on the virtualenv</p> <p>git clone https://github.com//ckanext-selfinfo.git cd ckanext-selfinfo pip install -e .</p> </li> <li> <p>Add <code>selfinfo</code> to the <code>ckan.plugins</code> setting in your CKAN    config file (by default the config file is located at    <code>/etc/ckan/default/ckan.ini</code>).</p> </li> <li> <p>Restart CKAN. For example if you've deployed CKAN with Apache on Ubuntu:</p> <p>sudo service apache2 reload</p> </li> </ol> <p>Using Pypi:</p> <ol> <li> <p>Activate your CKAN virtual environment, for example:</p> <p>. /usr/lib/ckan/default/bin/activate</p> </li> <li> <p>pip install ckanext-selfinfo</p> </li> </ol>"},{"location":"requirements/","title":"Requirements","text":"<p>Having CKAN Core version 2.10+ and Redis configured</p>"},{"location":"secure_url_and_action/","title":"Secure URL and Action","text":""},{"location":"secure_url_and_action/#setup-secure-url-and-action-name","title":"Setup secure URL and Action name","text":"<p>Out of the box, Selfinfo page registered under <code>/ckan-admin/selfinfo</code> URL, which can is only protected by Sysadmin access check.</p> <p>To add an additional layer of protection, provide an custom path that will modify the original path, so other wont know under what URL it is actually registered. This can be done by adding <code>ckan.selfinfo.page_url</code> to CKAN config, where that value is your custom URL.</p> <p>Same goes for main Selfinfo endpoint that provides same information, but in API format. By default it uses <code>get_selfinfo</code> endpoint and to modify it using <code>ckan.selfinfo.main_action_name</code> CKAN config, where that value is the new action name.</p>"},{"location":"unique_redis_key_per_portal_instance/","title":"Unique Redis key","text":""},{"location":"unique_redis_key_per_portal_instance/#unique-redis-key-per-portalinstance","title":"Unique Redis key per portal/instance","text":"<p>By default, Selfinfo will store some of the Data like Errors or Python Modules under standard Redis keys and if you have another portal/instance connected to same Redis, they might interfere with each other, which is not what we want.</p> <p>To avoid this, you can add an unique Redis prefix key, that will allow you to separate one portal/instance from another. To do so, add <code>ckan.selfinfo.redis_prefix_key</code> config param with an unique prefix key.</p> <p>Example: adding <code>random_key</code> will store the data under <code>random_key_errors_selinfo</code>.</p>"}]}